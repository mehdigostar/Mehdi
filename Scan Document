# import the necessary packages
import cv2
import numpy as np
import sys

def order_points(pts):
    rect = np.zeros((4, 2), dtype = "float32")

    s = pts.sum(axis=1)
    rect[0] = pts[np.argmin(s)]
    rect[2] = pts[np.argmax(s)]

    diff = np.diff(pts, axis=1)
    rect[1] = pts[np.argmin(diff)]
    rect[3] = pts[np.argmax(diff)]

    return rect

def four_point_transform(image, pts):
    rect = order_points(pts)
    (tl, tr, br, bl) = rect
    widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
    widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
    maxWidth = max(int(widthA), int(widthB))

    heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
    heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
    maxHeight = max(int(heightA), int(heightB))

    dst = np.array([
      [0, 0],
      [maxWidth - 1, 0],
      [maxWidth - 1, maxHeight - 1],
      [0, maxHeight - 1]], dtype = "float32")

    M = cv2.getPerspectiveTransform(rect, dst)
    warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))

    return warped


# load the image
img = cv2.imread('Adoc4.jpg')
orig = img.copy()

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (5,5),0)
cv2.imshow("gray", gray)
cv2.waitKey(0)
edged = cv2.Canny(gray,20,200)

print "STEP 1: Edge Detection"
cv2.imshow("Edged", edged)
cv2.waitKey(0)

(_, contours, _) = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
contours = sorted(contours, key=cv2.contourArea, reverse=True)[:5]

cv2.drawContours(edged, contours, -1, (0, 255, 0), 5)
cv2.imshow('Res', edged)
cv2.waitKey(0)

for c in contours:
	peri = cv2.arcLength(c, True)
	approx = cv2.approxPolyDP(c, 0.02 * peri, True)

	if len(approx) == 4:
		screenCnt = approx
		break

print "STEP 2: Find contours of paper"
cv2.drawContours(img, [screenCnt], -1, (0, 255, 0), 2)
cv2.imshow("Outline", img)

warped = four_point_transform(orig, screenCnt.reshape(4, 2) )

# siah sefid kardan tasvir ::
#warped = cv2.cvtColor(warped, cv2.COLOR_BGR2GRAY)

# binnary kardan tasvir ::
#warped = cv2.adaptiveThreshold(warped, 251, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,2)

# binnary kardan tasvir ::

print "STEP 3: Apply perspective transform"
cv2.imshow("Original", orig)
warped = cv2.resize(warped, (img.shape[1], img.shape[0]), interpolation=cv2.INTER_AREA)
cv2.imshow("Scanned", warped)
cv2.waitKey(0)
cv2.destroyAllWindows()
